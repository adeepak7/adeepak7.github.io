{
  "data_position": "8",
  "publication_year": "August 2022",
  "publication_title": "HelpShift Engineering Talk - Finding all edges on any smallest path between 2 nodes in a DAG",
  "article_type": "Engineering Talk",
  "authors": "<strong>Deepak Ahire</strong>",
  "publishing_authority_name": "Helpshift Inc.",
  "host_version_html_name": "Helpshift Engineering Youtube Channel Version",
  "host_version": "https://www.youtube.com/watch?v=fyO3dpeC5b0",
  "pdf_version_html_name": "",
  "pdf_version": "",
  "publication_code_html_name": "",
  "publication_code": "",
  "publication_video_demonstration_html_name": "",
  "publication_video_demonstration": "",
  "official_acknowledgement_html_name": "",
  "official_acknowledgement_version": "",
  "publish_abstract": true,
  "publication_abstract": "Algorithms proposed in this article aim to find all edges on any smallest route connecting two nodes of a directed acyclic graph (DAG). However, for a DAG with N nodes, the number of routes possible connecting any two nodes can be exponential. Hence, it is unfeasible to compute all the routes to attain the smallest ones in the polynomial-time and eventually produce a set of all edges that contribute or make any of the smallest routes. This article presents all the existing approaches to solve the problem, and we propose a new technique to compute the required edges by taking advantage of parallel computing using the C++ OpenMP API by parallelizing one of the existing approaches. We present a step-by-step procedure to convert a sequential algorithm into a parallel algorithm by identifying the parallelizable tasks. We also took advantage of parallel Dijkstraâ€™s by using the nested parallelism feature of OpenMP and presented a technique for deciding the optimal number of threads to run the tasks that involve unbounded parallelism. Using parallel computing, we could achieve a speedup of over 13% for a complete graph. The techniques proposed here are not confined only to this particular use case. However, these have a more extensive scope in dynamic programming (DP), graph theory, and counting problems.",
  "footer": ""
}